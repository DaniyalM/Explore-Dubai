apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.gms.google-services'
//apply plugin: 'com.google.gms.google-services'
def config = rootProject.extensions.getByName("ext")


android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"
    lintOptions {
        checkReleaseBuilds false
        // Or, if you prefer, you can continue to check for errors in release builds,
        // but continue the build even when errors are found:
        abortOnError false
    }


    defaultConfig {
        applicationId "com.app.dubaiculture"
        minSdkVersion 22
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"
        multiDexEnabled true //add this line in the defaultConfig

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        manifestPlaceholders = [appAuthRedirectScheme: 'com.redirectScheme.comm']


    }
    signingConfigs {
        stagConfig {
            storeFile file("../certificates/dubaiculturecert.jks")
            storePassword "dc123dc"
            keyAlias "dccert"
            keyPassword "dc123dc"
        }
        prodConfig {
            storeFile file("../certificates/productionKS.jks")
            storePassword "dj123456789"
            keyAlias "production"
            keyPassword "dj123456789"
        }
    }
    buildTypes {
        release {
            applicationIdSuffix ".release"
            minifyEnabled false
            debuggable false
            buildConfigField("String", "BASE_URL", "\"http://dc.wewanttraffic.me/api/\"")
            buildConfigField("Boolean", "IS_ENCRYPTION_ENABLED", "false")
            buildConfigField("Boolean", "IS_TSL_ENABLED", "false")
            buildConfigField("String", "DATA_STORE_NAME", "\"DATA_STORE_DEBUG\"")
            buildConfigField("String", "DB_NAME", "\"ROOM_DB_DEBUG\"")

            Properties properties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                properties.load(rootProject.file("local.properties").newDataInputStream())
            }
            manifestPlaceholders = [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "AIzaSyCGush-kym8k4I87nxpxNNYEKgYtdecfu0") ]


        }
        debug {
            applicationIdSuffix ".debug"
            minifyEnabled false
            debuggable true
            buildConfigField("String", "BASE_URL", "\"http://dc.wewanttraffic.me/api/\"")
            buildConfigField("Boolean", "IS_ENCRYPTION_ENABLED", "false")
            buildConfigField("Boolean", "IS_TSL_ENABLED", "false")
            buildConfigField("String", "DATA_STORE_NAME", "\"DATA_STORE_DEBUG\"")
            buildConfigField("String", "DB_NAME", "\"ROOM_DB_DEBUG\"")

            Properties properties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                properties.load(rootProject.file("local.properties").newDataInputStream())
            }
            manifestPlaceholders = [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "AIzaSyCGush-kym8k4I87nxpxNNYEKgYtdecfu0") ]


        }
        stag {
            applicationIdSuffix ".stag"
            minifyEnabled false
            shrinkResources false
            debuggable true
            buildConfigField("String", "BASE_URL", "\"http://dc.wewanttraffic.me/api/\"")
            buildConfigField("Boolean", "IS_ENCRYPTION_ENABLED", "false")
            buildConfigField("Boolean", "IS_TSL_ENABLED", "false")
            buildConfigField("String", "DATA_STORE_NAME", "\"DATA_STORE_STAG\"")
            buildConfigField("String", "DB_NAME", "\"ROOM_DB_STAG\"")
            signingConfig signingConfigs.stagConfig

//            buildConfigField("String", "BASE_URL", "\"https://a04f708a-3b9c-41a5-bc03-1450f93ba4a1.mock.pstmn.io/\"")

            Properties properties = new Properties()
            if (rootProject.file("local.properties").exists()) {
                properties.load(rootProject.file("local.properties").newDataInputStream())
            }
            manifestPlaceholders = [ mapsApiKey : properties.getProperty("MAPS_API_KEY", "AIzaSyCGush-kym8k4I87nxpxNNYEKgYtdecfu0") ]

        }
        prod {
            applicationIdSuffix ".prod"
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "BASE_URL", "\"http://dc.wewanttraffic.me/api/\"")
            buildConfigField("Boolean", "IS_ENCRYPTION_ENABLED", "false")
            buildConfigField("Boolean", "IS_TSL_ENABLED", "false")
            buildConfigField("String", "DATA_STORE_NAME", "\"DATA_STORE_PROD\"")
            buildConfigField("String", "DB_NAME", "\"ROOM_DB_PROD\"")
            signingConfig signingConfigs.prodConfig

//            buildConfigField("String", "BASE_URL", "\"https://73efb1a2-d5dc-4e68-8248-b61a25f033d9.mock.pstmn.io\"")

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    // For Kotlin projects
    kotlinOptions {
        jvmTarget = "1.8"
    }

    buildFeatures {
        dataBinding = true

    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation config.commonDependency.ktx_core
    implementation config.commonDependency.multidex
    implementation config.commonDependency.appcompat
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-messaging:21.1.0'
    //Databinding Compiler
    kapt config.commonDependency.dataBinding
    //RetroFit Networking
    implementation config.retrofitDependency.retrofit2
    implementation config.retrofitDependency.loggingInterceptor
    implementation config.retrofitDependency.retrofitGsonConvertor
    implementation config.retrofitDependency.retrofit2AdatperRxJava

    implementation config.commonDependency.gson
    // rx java
    implementation config.reactive_extension.rxJava2
    // testing
    implementation config.testing.junit
    implementation config.testing.junitExtension
    implementation config.testing.espresso
    implementation config.testing.mockito
    testImplementation config.testing.mockitoTestImplementation
    androidTestImplementation config.testing.mockitoAndroidTestImplementation
    // material design
    implementation config.ui_design.materialDesign
    //Complex RecyclerViews
    implementation config.ui_design.complexRv
    //Complex RecyclerViews
    implementation config.ui_design.complexRvBinding
    //viewPager_2
    implementation config.ui_design.viewPager2
    //ConstraintLayout
    implementation config.ui_design.constraintLayout
    // room
    implementation config.database.room
    kapt config.database.roomAnnotation
    implementation config.database.roomCoroutines
    // Android Architecture Component.
    implementation config.androidArchitectureComponents.lifeCycleExtension
    implementation config.androidArchitectureComponents.lifeCycleLiveData
    implementation config.androidArchitectureComponents.lifeCycleRuntime
    implementation config.androidArchitectureComponents.lifeCycleRuntimeKtx
    implementation config.androidArchitectureComponents.lifecyleViewModel
    // Coroutines
    implementation config.backgroundAndAsynThreading.coroutines
    //Work Manager
    implementation config.backgroundAndAsynThreading.workManager
    // Navigation Component
    implementation config.navigationDependency.navFragment
    implementation config.navigationDependency.navKtx
    // Glide
    implementation config.image_processing.glide
    kapt config.image_processing.glideCompiler
    // Activity KTX for viewModels()
    implementation config.commonDependency.activityKtx
    //Dagger - Hilt
    implementation config.di.hilt
    implementation config.di.hiltLifeCycleVM
    kapt config.di.hiltCompiler
    kapt config.di.hiltDagger
    // Timber
    implementation config.logs.timber
    //DataStore Preferences
    implementation config.commonDependency.dataStorePref
    //For Event Management
    api config.commonDependency.otto
    //For Lottie
    implementation config.ui_design.lottieViews
    //QuickPermissions for runtime permission
    implementation config.ui_design.quickPermission
    //Localization Library
    implementation config.ui_design.localization
    //for text size
    implementation config.ui_design.ssp
    //for screen size
    implementation config.ui_design.sdp

    implementation config.ui_design.circleimageview
    //paging3
    implementation config.paging3.pagingRuntime
    implementation config.paging3.pagingRuntimeKtx


    //location Related Work
    implementation config.google.location_google

    //Image Cropping Api
    implementation config.media_libraries.image_crop_api


    // GMS
    implementation config.google.map_google

    //OTP
    implementation config.otp.otpview_library
    implementation config.ui_design.roundedImageView

 //   SVG Glide
    implementation config.image_processing.glideToSvg
        // for edit mask

    //lib phone
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.12.19'
    implementation 'com.balysv:material-ripple:1.0.2'
//    implementation 'io.michaelrocks:libphonenumber-android:8.10.16'

    //recycler Animation
    implementation 'jp.wasabeef:recyclerview-animators:4.0.2'
    implementation 'com.tapadoo.android:alerter:7.0.1'
    implementation 'com.google.android:flexbox:2.0.1'
    implementation 'com.github.devendroid:ReadMoreOption:1.0.2'


    //Google Map
    implementation "com.google.android.gms:play-services-maps:17.0.0"

    //location Related Work
    implementation config.google.location_google
    implementation 'q.rorbin:badgeview:1.1.3'
    implementation 'com.daimajia.androidanimations:library:2.4@aar'

//    implementation 'com.facebook.shimmer:shimmer:0.5.0'
    implementation "com.xwray:groupie-databinding:2.7.0"


    implementation 'com.google.vr:sdk-audio:1.160.0'
    implementation 'com.google.vr:sdk-panowidget:1.180.0'
    implementation 'com.google.vr:sdk-base:1.160.0'

    // wikitude
    implementation 'com.wikitude:native:9.6.0'


    //photo view
    implementation 'com.github.chrisbanes:PhotoView:2.0.0'

    //Blurry
    implementation 'jp.wasabeef:blurry:4.0.0'


    //beacon

    implementation 'com.estimote:sdk:1.0.12'


    //firebase
    implementation platform('com.google.firebase:firebase-bom:26.6.0')
//    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.3.9'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.1'
    implementation "androidx.fragment:fragment-ktx:1.3.2"

}